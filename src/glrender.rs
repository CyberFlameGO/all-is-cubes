// Copyright 2020 Kevin Reid under the terms of the MIT License as detailed
// in the accompanying file README.md or <http://opensource.org/licenses/MIT>.

//! OpenGL-based graphics rendering.

// Right now, we don't do 'native' rendering, only wasm, and I haven't figured out
// how to write _actually_ generic luminance code.
#![cfg(feature = "wasm")]

use cgmath::{Point3, Vector3};
use luminance_derive::{Semantics, Vertex};
use luminance_front::context::GraphicsContext;
use luminance_front::pipeline::PipelineState;
use luminance_front::render_state::RenderState;
use luminance_front::shader::{BuiltProgram, Program};
use luminance_front::tess::Mode;
use luminance_web_sys::{WebSysWebGL2Surface, WebSysWebGL2SurfaceError};
use luminance_windowing::WindowOpt;
use std::time::Duration;
use wasm_bindgen::prelude::*;
use web_sys::console;

use crate::math::{FreeCoordinate, GridPoint};
use crate::space::Space;

const SHADER_COMMON: &str = include_str!("shaders/common.glsl");
const SHADER_FRAGMENT: &str = include_str!("shaders/fragment.glsl");
const SHADER_VERTEX_BLOCK: &str = include_str!("shaders/vertex-block.glsl");
const SHADER_VERTEX_COMMON: &str = include_str!("shaders/vertex-common.glsl");

pub(crate) struct GLRenderer {
    surface: WebSysWebGL2Surface,
    block_program: Program<VertexSemantics, (), ()>,
    fake_time: Duration,
}

impl GLRenderer {
    #[cfg(feature = "wasm")]
    pub fn new(canvas_id: &str) -> Result<Self, WebSysWebGL2SurfaceError> {
        let mut surface = WebSysWebGL2Surface::new(canvas_id, WindowOpt::default())?;

        let BuiltProgram {program: block_program, warnings} = surface
            .new_shader_program::<VertexSemantics, (), ()>()
            .from_strings(
                &(SHADER_COMMON.to_owned() + SHADER_VERTEX_COMMON + SHADER_VERTEX_BLOCK),
                None,
                None,
                &(SHADER_COMMON.to_owned() + SHADER_FRAGMENT))
            .expect("shader compilation failure");
        for warning in warnings {
            console::warn_1(&JsValue::from_str(&format!("GLSL warning: {:?}", warning)));
        }

        Ok(Self {
            surface,
            block_program,
            fake_time: Duration::default(),
        })
    }

    pub fn render_frame(&mut self, space: &Space) {
        let mut surface = &mut self.surface;
        let block_program = &mut self.block_program;

        self.fake_time += Duration::from_millis(1000/60);  // TODO

        let back_buffer = surface.back_buffer().unwrap();  // TODO error handling

        let triangle = polygonize_space(&mut surface, &space);

        // sample code from https://rust-tutorials.github.io/learn-luminance/chapter_1_3.html
        let t = self.fake_time.as_millis() as f32 * 1e-3;
        let color = [t.cos(), t.sin(), 0.5, 1.];

        let render = surface.new_pipeline_gate().pipeline(
            &back_buffer,
            &PipelineState::default().set_clear_color(color),
            |_, mut shading_gate| {
                shading_gate.shade(block_program, |_, _, mut render_gate| {
                    render_gate.render(&RenderState::default(), |mut tess_gate| {
                         tess_gate.render(&triangle)
                    })
                })
            },
        ).assume();  // TODO error handlint

        if !render.is_ok() {
            panic!("not ok");  // TODO what good error handling goes here?
        }

        // There is no swap_buffers operation because WebGL implicitly does so.
    }
}

/// Defines vertex array structure for luminance framework.
/// Note that each "wrapper" names a new type generated by the derive(Semantics).
#[derive(Copy, Clone, Debug, Semantics)]
pub enum VertexSemantics {
    // TODO: revisit compact representations
    #[sem(name = "position", repr = "[f32; 3]", wrapper = "VertexPosition")]
    Position,
    #[sem(name = "color", repr = "[f32; 4]", wrapper = "VertexRGBA")]
    Color,
}

#[derive(Clone, Copy, Vertex)]
#[vertex(sem = "VertexSemantics")]
pub struct Vertex {
    #[allow(dead_code)]  // read by shader
    position: VertexPosition,

    #[allow(dead_code)]  // read by shader
    color: VertexRGBA,
}

fn polygonize_space(context :&mut WebSysWebGL2Surface, space: &Space) -> luminance_front::tess::Tess<Vertex> {
    // TODO: take a Grid parameter for chunked rendering

    let mut vertices :Vec<Vertex> = Vec::new();

    for cube in space.grid().interior_iter() {
        let free = cube.cast::<f32>().unwrap();
        let color = VertexRGBA::new(space[cube].color().to_rgba_array());
        let mut push_1 = |p: Point3<f32>| {
            vertices.push(Vertex::new(VertexPosition::new(p.into()), color));
        };

        push_1(free);
        push_1(free + Vector3::new(1.0, 0.0, 0.0));
        push_1(free + Vector3::new(0.0, 1.0, 0.0));
    }

    context
        .new_tess()
        .set_vertices(vertices)
        .set_mode(Mode::Triangle)
        .build()
        .unwrap()  // TODO error handling
}