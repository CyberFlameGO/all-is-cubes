name: AIC Build, Test, Deploy

permissions: {}

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    strategy:
      matrix:
        # This matrix doesn't do any actual Cartesian products, but instead has a
        # basic configuration (Linux, stable Rust, using lockfile) and also tries
        # changing one of those parameters but not the others.
        include:
          # This is the configuration we use for the wasm build and exhaustive tests.
          - os: ubuntu-latest
            toolchain: stable
            depversions: locked
            primary: true
          # Additional configurations to try:

          # Windows
          - os: windows-latest
            toolchain: stable
            depversions: locked
            primary: false
          
          # macOS
          - os: macos-latest
            toolchain: stable
            depversions: locked
            primary: false
          
          # Nightly Rust
          - os: ubuntu-latest
            toolchain: nightly
            depversions: locked
            primary: false
          
          # Updated dependencies
          - os: ubuntu-latest
            toolchain: stable
            depversions: latest
            primary: false

    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ !matrix.primary }}

    steps:
    - uses: actions/checkout@v2

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
          toolchain: ${{ matrix.toolchain }}
          target: wasm32-unknown-unknown
          override: true
          components: rustfmt, clippy

    - name: Install native libraries
      if: ${{ runner.os == 'Linux' }}
      run: |
          sudo apt update
          sudo apt-get -y install libxrandr-dev xorg-dev libglfw3-dev 
    
    - name: Update dependencies
      if: ${{ matrix.depversions == 'latest' }}
      run: cargo update

    - uses: Swatinem/rust-cache@v1

    - name: Install wasm-pack
      # Use workspace target directory for cargo install's build,
      # so that the build of wasm-pack will be cached by rust-cache action.
      run: cargo install wasm-pack
      env:
        CARGO_TARGET_DIR: target/

    # Run tests in `test-more` mode in the "primary" matrix configuration, and
    # run them in the faster mode (which does not try disabling/enabling
    # features) for all other variations.
    # This is because the exhaustive tests are intended to catch bugs in our own
    # code (a miswritten `cfg` or similar), and the testing against nightly and
    # latest versions is intended to catch bugs in *our dependencies*; and the
    # two are sufficiently unlikely to interact that it doesn't seem worth
    # spending the CI latency to do both.
    #
    # TODO: aic_disable_wgpu_comparison=1 is a temporary kludge to deal with the quirks
    # of software rendering. Take it out and make the wgpu render tests pass properly.
    - name: Run basic tests
      if: ${{ !matrix.primary && runner.os != 'Windows' }}
      run: cargo xtask test
      env:
        aic_disable_wgpu_comparison: 1 
    - name: Run exhaustive tests
      if: ${{ matrix.primary }}
      run: cargo xtask test-more
      env:
        aic_disable_wgpu_comparison: 1
    - name: Run Windows test
      # Temporary kludge because I haven't gotten npm (or xtask invoking npm)
      # working on Windows. So, we'll run only the desktop + render tests
      # and avoid mentioning all-is-cubes-wasm or all-is-cubes-server
      if: ${{ runner.os == 'Windows' }}
      run: cargo test -p all-is-cubes -p all-is-cubes-content -p all-is-cubes-desktop -p test-renderers
      env:
        aic_disable_wgpu_comparison: 1
    
    # Save the test-renderers results so we can download and view them
    - name: Save test-renderers output
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: test-renderers-output ${{ matrix.os }} ${{ matrix.toolchain }} ${{ matrix.depversions }}
        path: |
          target/test-renderers-*/
          test-renderers/expected/
          test-renderers/src/report.css

    # Unlike the tests, we *do* run lint against all versions because future
    # warnings might be interesting.
    - name: Lint
      # TODO: reenable on Windows when we figure out the npm problem
      if: ${{ runner.os != 'Windows' }}
      run: cargo xtask lint
    
    # Save wasm build so that we can optionally deploy it without rebuilding
    # (but only for the stablest matrix version)
    - name: Save wasm dist artifact
      if: ${{ matrix.primary }}
      uses: actions/upload-artifact@v3
      with:
        name: wasm-dist
        path: all-is-cubes-wasm/dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    # Do this only if we are pushing to main, not to pull requests.
    # (Or if we're on a special 'pages-alt' branch, so we can experiment with
    # deployment before pushing to main.)
    #
    # Caution: GitHub's parsing is weird around multiline expressions so just don't.
    # https://github.community/t/how-to-write-multi-line-condition-in-if/128477
    if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/pages-alt') }}

    steps:
    - name: Download wasm dist artifact
      uses: actions/download-artifact@v2
      with:
        name: wasm-dist
        path: dist-for-deploy
    - name: Deploy to GitHub Pages
      uses: crazy-max/ghaction-github-pages@v2
      with:
        target_branch: gh-pages
        build_dir: dist-for-deploy
        keep_history: false
        jekyll: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  fuzz:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    # Cache the target/ dir (for xtask).
    - uses: Swatinem/rust-cache@v1
      with:
        key: main
    # Cache the fuzz/target/ dir where the actual fuzz targets are built.
    - uses: Swatinem/rust-cache@v1
      with:
        # additional key to distinguish ./fuzz/target from ./target
        key: fuzz
        target-dir: ./fuzz/target

    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
          toolchain: nightly
          override: true

    - name: Install cargo-fuzz
      run: cargo install cargo-fuzz

    - name: Cache fuzzer corpus
      uses: actions/cache@v3
      with:
        key: fuzz-corpus
        path: |
          fuzz/corpus

    - name: Fuzz
      # Note: The specified timeout value is per-fuzz-target; as of this writing
      # there are 6 fuzz targets and so the total time will be 720 seconds = 12 minutes.
      run: cargo xtask fuzz 120
